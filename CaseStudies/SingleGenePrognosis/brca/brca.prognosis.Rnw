%\VignetteEngine{knitr::knitr}

<<setup, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center', fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE, cache=FALSE)
options(replace.assign=TRUE,width=90)
days.per.month <- 30.4368
days.per.year <- 365.242
par.original <- par()
library(knitr)
library(MetaGx)
library(gdata)
library(annotate)
library(ggplot2)
library(xtable)
library(genefu)
library(reshape2)
library(hgu133plus2.db)
library(metafor)
library(devtools)
library(piano)
library(snow)
@


\documentclass{article}

\usepackage{graphicx}
\usepackage{microtype}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\usepackage{titlesec}
\usepackage{tabularx}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage[table]{xcolor}
\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor=black,
    filecolor=black,
    linkcolor=black,
    urlcolor=black
}
%\newcommand{\sectionbreak}{\clearpage}

\begin{document}

\title{Breast Cancer Prognosis}

%\author{Gregory M. Chen}
\date{\today}
\maketitle




<<load_data, cache=TRUE>>=
source(system.file("extdata", "patientselection.config", package="MetaGxBreast"))
source(system.file("extdata", "createEsetList.R", package="MetaGxBreast"))

esets <- lapply(esets, function(x) {
  factor.indices <- sapply(pData(x), is.factor)
  pData(x)[factor.indices] <- lapply(pData(x)[factor.indices], as.character)
  return(x)
  })
# For TCGA, remove any genes that are all zero
esets$TCGA <- esets$TCGA[apply(exprs(esets$TCGA), 1, function(row) !all(row==0)),]
esets <- lapply(esets, function(x) {
  x <- subtypeClassification(x, model = "scmod2")
  return(x)
  })
eset.names <- names(esets)
esets <- lapply(names(esets), function(x) {
  eset.toreturn <- esets[[x]]
  eset.toreturn$data.source <- x
  return(eset.toreturn)
  })
names(esets) <- eset.names

gene.table <- read.table("brca.genes.tsv", sep="\t", header=TRUE, stringsAsFactors = FALSE)
gene.names <- gene.table$Gene.name
entrez.ids <- gene.table$Entrez.ID
names(entrez.ids) <- gene.names

# For each dataset: if it contains some patients with the genes, remove patients with NA values for these genes
#esets <- lapply(esets, function(eset) {
#  for(entrez.id in entrez.ids) {
#    if(entrez.id %in% fData(eset)$EntrezGene.ID) {
#      index <- which(fData(eset)$EntrezGene.ID == entrez.id)
#      eset <- eset[, !is.na(exprs(eset)[index,,drop=FALSE]) ]
#      }
#  }
#  return(eset)
#})

# For each dataset, remove genes that are not represented in all patients
#esets <- lapply(esets, function(eset) eset[complete.cases(exprs(eset)),])

# only keep patients with survival data
esets.os <- lapply(esets, function(eset) eset[,!is.na(eset$days_to_death) & !is.na(eset$vital_status)])
esets.rfs <- lapply(esets, function(eset) eset[,!is.na(eset$recurrence_status) & !is.na(eset$days_to_tumor_recurrence)  |  !is.na(eset$dmfs_status) & !is.na(eset$dmfs_days)])

## Remove datasets that are empty
esets.os <- esets.os[sapply(esets.os, function(x) ncol(exprs(x)) > 0)]
esets.rfs <- esets.rfs[sapply(esets.rfs, function(x) ncol(exprs(x)) > 0)]

esets.with.all.genes <- esets[
    sapply(esets, function(eset) {
      return(all(entrez.ids %in% as.character(fData(eset)$EntrezGene.ID)))
      })
  ]


#esets.merged <- MetaGx::datasetMerging(esets.with.all.genes)

@

\tableofcontents
\pagebreak
\section{Datasets}

\subsection{All Datasets}

<<get_num_genes_datasets>>=
num.patients <- sum(sapply(esets, function(x) ncol(exprs(x))))
num.datasets <- length(esets)

num.patients.survival <- sum(sapply(esets.rfs, function(x) ncol(exprs(x))))
num.datasets.survival <- length(esets.rfs)
@

For gene coexpression and GSEA, we used \Sexpr{num.patients} patients from \Sexpr{num.datasets} datasets:
<<Dataset_table, results='asis'>>=
data.counts <- as.data.frame(sapply(esets, function(x) ncol(exprs(x))))
colnames(data.counts) <- "Number of samples"
data.counts <- rbind(data.counts, sum(data.counts[,1]))
rownames(data.counts)[nrow(data.counts)] <- "Sum"
xtable(data.counts)
@

\pagebreak


\section{Pairwise Coexpression}

Using our compendium of breast cancer datasets, we evaluated pairwise coexpression of the genes of interst. For each gene pair, we computed Pearson's Correlation Coefficient in all datasets for which both genes were present. We used the meta-analytic method of Hunter and Schmidt (1982) to compute a summary estimate, shown in the below heatmap. 

<<Pairwise_coexpression, fig.width=6, fig.height=6, out.width="0.6\\textwidth">>=
# Get pairwise coexpression matrix
get.meta.correlation.hedges <- function(pcc, n) {
  fisher.z <- 0.5 * log( (1 + pcc) / (1 - pcc) )
  fisher.z.var <- 1 / (n - 3)
  fisher.z.sd <- sqrt(fisher.z.var)
  fisher.z.meta <- survcomp::combine.est(fisher.z, fisher.z.sd, hetero=TRUE, na.rm=TRUE)$estimate
  pcc.meta <- (exp(2*fisher.z.meta) - 1) / (exp(2*fisher.z.meta) + 1)
  return(pcc.meta)
}

get.meta.correlation.hunter.schmidt <- function(pcc, n, na.rm=FALSE) {
  if(na.rm) {
    n <- n[!is.na(pcc)]
    pcc <- pcc[!is.na(pcc)]
    }
  pcc.meta <- sum(n * pcc) / sum(n)
  return(pcc.meta)
}

pairwise.coexpression.matrices <- lapply(esets, function(eset) {
  gene.indices <- sapply(entrez.ids, function(entrez.id) {
    index <- which(fData(eset)$EntrezGene.ID == entrez.id)
      if(length(index) > 1) {
        stop("Found a different number than one matching Entrez ID")
      } else if(length(index) == 0) {
        return(NA)
        }
      return(index)
    })
  names(gene.indices) <- gene.names
  pairwise.correlation.matrix <- sapply(gene.indices, function(index1) {
    return(sapply(gene.indices, function(index2) 
      cor(exprs(eset)[index1,], exprs(eset)[index2,], method = 'pearson')
      ))
    })
  })


meta.coexpression.matrix <- sapply(1:length(gene.names), function(x) sapply(1:length(gene.names), function(y) {
  coexp.vals <- sapply(pairwise.coexpression.matrices, function(coexp.matrix) coexp.matrix[x,y])
  meta.coexp <- get.meta.correlation.hunter.schmidt(coexp.vals, sapply(esets, ncol), na.rm=TRUE)
  }))

rownames(meta.coexpression.matrix) <- gene.names
colnames(meta.coexpression.matrix) <- gene.names

diag(meta.coexpression.matrix) <- NA

hclust.ord <- hclust(dist(meta.coexpression.matrix))$ord

meta.coexpression.matrix <- meta.coexpression.matrix[hclust.ord, rev(hclust.ord)]

meta.coexpression.matrix.m <- melt(meta.coexpression.matrix)

ggplot(meta.coexpression.matrix.m, aes(Var1, Var2)) + 
    geom_tile(aes(fill = value), colour = "black") + 
    scale_fill_gradient2(name="Correlation", low="#276419", mid="white", high="#8e0152", limits=c(-1,1)) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.text.y = element_text(angle = 90), axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position='none') + geom_text(label=as.numeric(sprintf("%.2f", meta.coexpression.matrix)), colour="black")
@

\pagebreak

\section{Gene Set Analysis}

We performed pathway-level analysis of the genes of interest. For each gene, datasets with over 10000 genes (including the gene of interest) were included. We computed Pearson's Correlation Coefficient between the gene of interest and all genes present in all included datasets. A meta-analytic estimate of correlation coefficients was computed using the method of Hunter and Schmidt (1982). Gene Set Analysis was performed using the meta-analytic correlation coefficients, using \texttt{R} package \texttt{piano} with default parameters (\texttt{geneSetStat=`mean'}). Gene sets from the Gene Ontology Biological Processes were downloaded from MSigDB. 

In the heatmap below, hierarchical clustering was performed on both rows and columns. Biological processes with at least FDR-adjusted p-value of less than 0.05 are shown; p-values are non-directional.

<<GSA_computation, cache=TRUE>>=
set.seed(100)
c5.bp.geneset <- piano::loadGSC("c5.bp.v5.1.entrez.gmt")

gsa.out <- lapply(entrez.ids, function(entrez.id) {
  # For each dataset: if it contains some patients with the genes, remove patients with NA values for these genes
  esets.with.gene <- lapply(esets, function(eset) {
    eset <- eset[complete.cases(exprs(eset)),]
    return(eset)
  })
  # Remove any dataset with fewer than 10000 features
  esets.with.gene <- esets.with.gene[sapply(esets.with.gene, function(eset) nrow(eset) > 10000)]
  
  # only keep esets with the gene
  esets.with.gene <- esets.with.gene[sapply(esets.with.gene, function(eset) entrez.id %in% fData(eset)$EntrezGene.ID )]
  
  intersecting.entrez.ids <- Reduce(intersect, sapply(esets.with.gene, function(eset) as.character(fData(eset)$EntrezGene.ID)))
  intersecting.entrez.ids <- as.numeric(intersecting.entrez.ids)
  count <- 0
  correlation.matrix <- sapply(esets.with.gene, function(eset) {
      count <<- count + 1
      gene.of.interest.index <- which(fData(eset)$EntrezGene.ID == entrez.id)
      entrez.id.exprs.vals <- exprs(eset)[gene.of.interest.index,]
      eset <- eset[fData(eset)$EntrezGene.ID %in% intersecting.entrez.ids,]
      cor.values <- apply(exprs(eset), 1, function(gene.exp.vals) cor(gene.exp.vals, entrez.id.exprs.vals, method='pearson'))
      cor.values <- cor.values[match(intersecting.entrez.ids, as.numeric(as.character(fData(eset)$EntrezGene.ID)))]
      return(cor.values)
    })
  
  meta.correlation.vals <- apply(correlation.matrix, 1, function(gene.correlation.vals) get.meta.correlation.hunter.schmidt(pcc = gene.correlation.vals, n=sapply(esets.with.gene, ncol)))
  
  names(meta.correlation.vals) <- sub("geneid.", "", names(meta.correlation.vals))
  
  gsa.out.current <- runGSA(meta.correlation.vals, gsc=c5.bp.geneset, ncpus = 4)
  
  return(gsa.out.current)
})

gsa.up.matrix <- sapply(gsa.out, function(gsa.out.current) {
  gsa.up.vals <- gsa.out.current$pAdjDistinctDirUp
  rownames(gsa.up.vals) <- names(gsa.out.current$gsc)
  return(gsa.up.vals)
  })

gsa.down.matrix <- sapply(gsa.out, function(gsa.out.current) {
  gsa.down.vals <- gsa.out.current$pAdjDistinctDirDn
  rownames(gsa.down.vals) <- names(gsa.out.current$gsc)
  return(gsa.down.vals)
  })

rownames(gsa.up.matrix) <- names(c5.bp.geneset$gsc)
rownames(gsa.down.matrix) <- names(c5.bp.geneset$gsc)
@

<<GSA_heatmap>>=
gsa.nondirectional.matrix <- sapply(gsa.out, function(gsa.out.current) {
  gsa.down.vals <- gsa.out.current$pAdjNonDirectional
  rownames(gsa.down.vals) <- names(gsa.out.current$gsc)
  return(gsa.down.vals)
  })
rownames(gsa.nondirectional.matrix) <- names(c5.bp.geneset$gsc)

save(gsa.nondirectional.matrix, file="gsa.nongsa.nondirectional.matrix.RData")

gsa.nondirectional.matrix.toplot <- gsa.nondirectional.matrix
# Only keep rows that have a p-value less than 0.05
gsa.nondirectional.matrix.toplot <- gsa.nondirectional.matrix.toplot[rowMin(gsa.nondirectional.matrix.toplot) < 0.05,]

# Cluster
gsa.nondirectional.matrix.toplot.geneset.ord <- hclust(dist(gsa.nondirectional.matrix.toplot))$ord
gsa.nondirectional.matrix.toplot.gene.ord <- hclust(dist(t(gsa.nondirectional.matrix.toplot)))$ord

gsa.nondirectional.matrix.toplot <- gsa.nondirectional.matrix.toplot[gsa.nondirectional.matrix.toplot.geneset.ord, gsa.nondirectional.matrix.toplot.gene.ord]

gsa.nondirectional.matrix.m <- melt(gsa.nondirectional.matrix.toplot)
colnames(gsa.nondirectional.matrix.m) <- c("GO.Biological.Process", "Gene", "p.adj")

# Retain original order of columns
gsa.nondirectional.matrix.m$Gene <- factor(gsa.nondirectional.matrix.m$Gene, levels = colnames(gsa.nondirectional.matrix.toplot))
 
#Retain original order of rows
gsa.nondirectional.matrix.m$GO.Biological.Process <- factor(gsa.nondirectional.matrix.m$GO.Biological.Process, levels = rownames(gsa.nondirectional.matrix.toplot))

#gsa.nondirectional.matrix.m$GO.Biological.Process <- paste0(gsa.nondirectional.matrix.m$GO.Biological.Process, 1:nrow(gsa.nondirectional.matrix.m))

ggplot(gsa.nondirectional.matrix.m, aes(Gene, GO.Biological.Process)) + geom_tile(aes(fill = p.adj), colour = "black") + theme(axis.text.y = element_text(size=3)) + scale_fill_gradient(low="#253494", high="#ffffcc")
@

\pagebreak

\section{Survival Analysis}

<<single_gene_survival, cache=FALSE, include=FALSE>>=
set.seed(500)
knitr.text <- lapply(1:length(entrez.ids), function(current.index) knit_expand(file='brca.single.gene.template.Rnw'))

# Store the total number of samples for which each gene is present
survival.sample.sizes <- c()

hr.random.effects.pval <- c()
hr.random.effects.estimate <- c()
hr.random.effects.lower <- c()
hr.random.effects.upper <- c()
hr.rma.objs <- list()

hr.matrix <- matrix(nrow=length(gene.names), ncol=length(esets.rfs))
rownames(hr.matrix) <- gene.names
colnames(hr.matrix) <- names(esets.rfs)

d.index.random.effects.pval <- c()
d.index.random.effects.estimate <- c()
d.index.random.effects.lower <- c()
d.index.random.effects.upper <- c()
d.index.rma.objs <- list()

d.index.matrix <- matrix(nrow=length(gene.names), ncol=length(esets.rfs))
rownames(d.index.matrix) <- gene.names
colnames(d.index.matrix) <- names(esets.rfs)

knitr.out <- knit(text=unlist(knitr.text))
@

\subsection{Datasets}

For survival analysis, we selected patients from studies which tracked recurence-free survival. When recurrence-free survival was unavailable, we used distant metastatis-free survival.  We identified \Sexpr{num.patients} patients from \Sexpr{num.datasets} datasets.
<<Dataset_table_survival, results='asis'>>=
data.counts <- as.data.frame(sapply(esets.rfs, function(x) ncol(exprs(x))))
colnames(data.counts) <- "Number of samples"
data.counts <- rbind(data.counts, sum(data.counts[,1]))
rownames(data.counts)[nrow(data.counts)] <- "Sum"
xtable(data.counts)
@

\pagebreak

\subsection{Summary of Results}

<<summary_forestplot, fig.width=9, fig.height=7, out.width="0.8\\textwidth">>=
hr.estimates <- sapply(hr.rma.objs, coef)
hr.variances <- sapply(hr.rma.objs, vcov)

#forest(estimates, variances, atransf=exp, psize=1, efac=0, slab=names(rma.objs), xlab="Hazard Ratio",xlim=c(-2,2), at=log(c(0.25,0.5,1,2,4)))
forest(hr.estimates, hr.variances, atransf=exp, psize=1, efac=0, slab=names(hr.rma.objs), xlab="Hazard Ratio",xlim=c(-2,3.5), at=log(c(0.25,0.5,1,2,4)), ilab = cbind(survival.sample.sizes, sprintf("%.2e", hr.random.effects.pval)), ilab.xpos = c(-1,1.5))
op <- par(cex=1, font=2)
text(-2, length(gene.names) + 1.5, "Gene", pos=4)
text(-1, length(gene.names) + 1.5, "n")
text(1.5, length(gene.names) + 1.5, "p-value")
text(3.5, length(gene.names) + 1.5, "Hazard Ratio [95% CI]", pos=2)
addpoly(hr.estimates, hr.variances, rows=length(hr.rma.objs):1, atransf=exp, annotate=FALSE)
abline(h=0.5, lwd=1)
par(op)
@

<<summary_forestplot_d_index, fig.width=9, fig.height=7, out.width="0.8\\textwidth">>=
d.index.estimates <- sapply(d.index.rma.objs, coef)
d.index.variances <- sapply(d.index.rma.objs, vcov)

#forest(estimates, variances, atransf=exp, psize=1, efac=0, slab=names(rma.objs), xlab="Hazard Ratio",xlim=c(-2,2), at=log(c(0.25,0.5,1,2,4)))
<<<<<<< HEAD
forest(d.index.estimates, d.index.variances, atransf=exp, psize=1, efac=0, slab=names(d.index.rma.objs), xlab="D-Index",xlim=c(-2,3.5), at=log(c(0.25,0.5,1,2,4)), ilab = cbind(survival.sample.sizes, sprintf("%.2e", d.index.random.effects.pval)), ilab.xpos = c(-1,1.5))
=======
forest(d.index.estimates, d.index.variances, atransf=exp, psize=1, efac=0, slab=names(d.index.rma.objs), xlab="Hazard Ratio",xlim=c(-2,3.5), at=log(c(0.25,0.5,1,2,4)), ilab = cbind(survival.sample.sizes, sprintf("%.2e", d.index.random.effects.pval)), ilab.xpos = c(-1,1.5))
>>>>>>> b85b8e415e5c654333210fada1bf6d1e9d149cad
op <- par(cex=1, font=2)
text(-2, length(gene.names) + 1.5, "Gene", pos=4)
text(-1, length(gene.names) + 1.5, "n")
text(1.5, length(gene.names) + 1.5, "p-value")
text(3.5, length(gene.names) + 1.5, "D-Index [95% CI]", pos=2)
addpoly(d.index.estimates, d.index.variances, rows=length(d.index.rma.objs):1, atransf=exp, annotate=FALSE)
abline(h=0.5, lwd=1)
par(op)
@
\pagebreak

<<summary_heatmap, fig.width=13, fig.height=5>>= 
.getHeatmap <- function(stat.matrix) {
    stat.matrix.m <- melt(stat.matrix)
    #if(cluster==TRUE) {
      ord <- hclust(dist(t(log(stat.matrix)), method="euclidean"))$order
    #}
    colnames(stat.matrix.m) <- c("Gene", "Dataset", "HR")
    stat.matrix.m$Gene <- factor(stat.matrix.m$Gene, levels=rev(rownames(stat.matrix)))
    stat.matrix.m$Dataset <- factor(stat.matrix.m$Dataset, levels=levels(stat.matrix.m$Dataset)[ord])
    
    p <- ggplot(stat.matrix.m, aes_string("Dataset", "Gene")) + 
      geom_tile(aes(fill = HR), colour = "white") + 
      scale_fill_gradient2(low="#67a9cf", mid="#f7f7f7", high="#ef8a62", trans="log", breaks=c(0.5,1,2), limits=exp(c(-1.14,1.14))) + 
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
    
      #geom_text(label=as.character(contingency.matrix), colour="white")
    return(p)
}

.getHeatmap(exp(hr.matrix))
@

\pagebreak

\Sexpr{knitr.out}

\pagebreak

\section{R SessionInfo}

<<r_session_info, include=TRUE, echo=TRUE, results='markup'>>=
devtools::session_info()
@

\end{document}
